name: Basic HPU test suite 

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]

  # Allow manual triggering for testing purposes
  workflow_dispatch: {}

permissions:
  pull-requests: write
  # This line allows it to read the status of checks like DCO
  checks: read

concurrency: 
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  gatekeeper:
    runs-on: ubuntu-latest
    permissions:
      # Required to read the status of checks and PR details
      checks: read
      # Add this line to allow posting comments on PRs
      pull-requests: write
    outputs:
      # This output will be used to signal if the main CI should run
      run_ci: ${{ steps.check_conditions.outputs.run_ci }}
      reason: ${{ steps.check_conditions.outputs.reason }}

    steps:
      # Add this checkout step
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          clean: true # Ensure a clean workspace before checkout
      - name: Wait for DCO check to complete
        id: wait_for_dco
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Waiting for DCO check to complete..."
          CONCLUSION=""
          ATTEMPTS=0
          MAX_ATTEMPTS=2 # 2 attempts * 20 seconds = 40 seconds timeout

          # Poll every 20 seconds until the check is no longer in progress
          while [[ -z "$CONCLUSION" || "$CONCLUSION" == "null" ]]; do
            if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
              echo "::error::Timed out waiting for DCO check to complete."
              CONCLUSION="timed_out"
              break
            fi

            sleep 20
            
            # Fetch all checks for the PR's head SHA
            CHECKS_JSON=$(gh api "repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/check-runs")
            
            # Find the DCO check's conclusion and status in one go
            DCO_CHECK=$(echo "$CHECKS_JSON" | jq '.check_runs[] | select(.name == "DCO")')
            CONCLUSION=$(echo "$DCO_CHECK" | jq -r '.conclusion')
            STATUS=$(echo "$DCO_CHECK" | jq -r '.status')
            
            echo "Current DCO status: $STATUS"
            ATTEMPTS=$((ATTEMPTS + 1))
          done
          
          echo "DCO check finished with conclusion: $CONCLUSION"
          echo "conclusion=$CONCLUSION" >> "$GITHUB_OUTPUT"

      - name: Check for other blocking conditions
        id: check_conditions
        # Provide the GITHUB_TOKEN for the gh CLI to authenticate
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Wait for a few seconds to allow GitHub to determine mergeable_state
          echo "Waiting 20 seconds for GitHub to calculate mergeable state..."
          sleep 20

          BLOCKING_REASON=""

          if [[ "${{ steps.wait_for_dco.outputs.conclusion }}" != "success" ]]; then
            BLOCKING_REASON="The **DCO sign-off** check did not pass (status: ${{ steps.wait_for_dco.outputs.conclusion }}). Please ensure all commits are signed-off."

          elif [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
            BLOCKING_REASON="This is a **Draft PR**. Please mark it as 'Ready for Review' to trigger the CI."

          # Use the 'gh' CLI to fetch the LIVE mergeable state after the sleep
          elif [[ "$(gh pr view ${{ github.event.pull_request.number }} --json mergeStateStatus --jq '.mergeStateStatus  ' | tr '[:upper:]' '[:lower:]')" == "behind" ]]; then
            BLOCKING_REASON="Your branch is **behind the base branch**. Please merge or rebase to get the latest changes."
          fi

          if [[ -n "$BLOCKING_REASON" ]]; then
            {
              echo "run_ci=false"
              echo "reason<<EOF"
              echo "$BLOCKING_REASON"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
          else
            echo "run_ci=true" >> "$GITHUB_OUTPUT"
          fi

          echo "Reason (if blocked): $BLOCKING_REASON"

      - name: Post comment if CI is blocked
        # This ensures that even if commenting fails, the next step will run
        continue-on-error: true
        # Only run this step if the check failed
        if: steps.check_conditions.outputs.run_ci == 'false'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### ðŸš§ CI Blocked

            The main CI workflow was not started for the following reason:
            > ${{ steps.check_conditions.outputs.reason }}

      - name: Fail the job to block downstream CI
        if: steps.check_conditions.outputs.run_ci == 'false'
        run: |
          echo "Failing this job to prevent the main CI from running."
          exit 1

  discover_tests:
    runs-on: ucb-vllm-cicd-g2
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Discover test functions
        id: set-matrix
        run: |
          # This command robustly discovers all functions in the script that match the 'run_*'
          # naming convention, excluding the main 'run_all_tests' function itself.
          # The final list is formatted into a JSON array required for the matrix strategy.
          TEST_FUNCTIONS=$( grep '^run_' ./tests/full_tests/ci_gsm8k_tests.sh | \
                   awk '{print $1}' | \
                   sed 's/()//' | \
                   jq -R . | jq -s -c . )

          echo "Discovered test matrix: $TEST_FUNCTIONS"
          # Fail the job if no tests were found.
          if [ "$TEST_FUNCTIONS" = "[]" ]; then
            echo "::error::No test functions were discovered. Failing the workflow."
            exit 1
          fi
          echo "matrix=$TEST_FUNCTIONS" >> "$GITHUB_OUTPUT"

  pre-commit:
    # This job now runs in parallel with the build job
    needs: gatekeeper
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          clean: true # Ensure a clean workspace before checkout

      - name: Setup Python
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: "3.12"

      - name: Add problem matchers
        run: |
          echo "::add-matcher::.github/workflows/matchers/actionlint.json"
          echo "::add-matcher::.github/workflows/matchers/mypy.json"

      - name: Run pre-commit hooks
        uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd # v3.0.1
        with:
          extra_args: --all-files --hook-stage manual

  pre_merge_hpu_test_build:
    runs-on: ucb-vllm-cicd-g2
    needs: [pre-commit, discover_tests]
    permissions:
      contents: read # Required to checkout code and read history

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for accurate commit comparison
          ref: ${{ github.event.pull_request.head.sha }}
          clean: true # Ensure a clean workspace before checkout

      - name: Setup Docker environment and build image
        # Using a multi-line string for the Dockerfile is generally fine,
        # but consider moving it to a separate file for better readability/maintainability
        run: |
          echo "Attempting to build Docker image..."
          # Ensure this image is accessible from GitHub Actions (e.g., public registry or authenticated private registry).
          docker build --no-cache -t hpu-plugin-v1-test-env-pre-merge-${{ github.event.pull_request.head.sha }} -f - . <<EOF
          FROM vault.habana.ai/gaudi-docker/1.22.0/ubuntu24.04/habanalabs/pytorch-installer-2.7.1:latest

          COPY ./ /workspace/vllm-gaudi
          WORKDIR /workspace

          RUN git clone https://github.com/vllm-project/vllm.git vllm
          WORKDIR /workspace/vllm
          RUN git checkout main

          # Pinning versions in requirements might be good practice for CI consistency
          RUN pip install pytest pytest_asyncio
          RUN pip install git+https://github.com/EleutherAI/lm-evaluation-harness.git

          ENV no_proxy=localhost,127.0.0.1
          ENV PT_HPU_ENABLE_LAZY_COLLECTIVES=true

          # Ensure setup.py install works as expected
          RUN bash -c 'pip install -r <(sed "/^[torch]/d" requirements/build.txt)'
          RUN VLLM_TARGET_DEVICE=empty pip install --no-build-isolation .

          # install development dependencies (for testing)
          RUN python3 -m pip install -e tests/vllm_test_utils

          WORKDIR /workspace/vllm-gaudi
          RUN pip install -e .

          WORKDIR /workspace
          # Symlinks. Ensure target paths are correct relative to the current WORKDIR
          # '/workspace/vllm/tests' is correct
          # Ensure these are created relative to the /workspace/ directory
          RUN ln -s /workspace/vllm/tests /workspace/tests \
              && ln -s /workspace/vllm/examples /workspace/examples \
              && ln -s /workspace/vllm/benchmarks /workspace/benchmarks

          EOF
          echo "Docker image built successfully."

  hpu_unit_tests:
    runs-on: ucb-vllm-cicd-g2
    needs: pre_merge_hpu_test_build
    steps:
      - name: Run pytest in tests/unit_tests
        run: |
          EXITCODE=1
          remove_docker_containers() { docker rm -f hpu-plugin-v1-test-unit-tests-${{ github.event.pull_request.head.sha }} || true; }
          trap 'remove_docker_containers; exit $EXITCODE;' EXIT
          remove_docker_containers

          echo "Running HPU plugin v1 unit tests"
          docker run --rm --runtime=habana --name=hpu-plugin-v1-test-unit-tests-${{ github.event.pull_request.head.sha }} --network=host \
            -e HABANA_VISIBLE_DEVICES=all \
            -e HF_HOME=/workspace/hf_cache \
            -e HF_TOKEN=${{ secrets.HF_TOKEN }} \
            -v /mnt/hf_cache:/workspace/hf_cache \
            hpu-plugin-v1-test-env-pre-merge-${{ github.event.pull_request.head.sha }} \
            /bin/bash -c "pytest -vvv --durations=10 --durations-min=1.0 /workspace/vllm-gaudi/tests/unit_tests"
          
          EXITCODE=$?
          echo "Test script exited with code: $EXITCODE"
  hpu_pd_tests:
    runs-on: ucb-vllm-cicd-g2
    # This is a final job that runs after the build and unit tests 
    # Unit tests are supposed to fail fast if anything goes wrong, removing the need for this job to run.
    needs: [pre_merge_hpu_test_build, hpu_unit_tests]
    steps:
      - name: Run test scripts
        run: |
          EXITCODE=1
          remove_docker_containers() { docker rm -f hpu-plugin-v1-test-pd-tests-${{ github.event.pull_request.head.sha }} || true; }
          trap 'remove_docker_containers; exit $EXITCODE;' EXIT
          remove_docker_containers

          echo "Running HPU plugin v1 nixl pd tests"
          docker run --rm --runtime=habana --name=hpu-plugin-v1-test-pd-tests-${{ github.event.pull_request.head.sha }} --network=host \
            -e HABANA_VISIBLE_DEVICES=all \
            -e HF_HOME=/workspace/hf_cache \
            -e HF_TOKEN=${{ secrets.HF_TOKEN }} \
            -v /mnt/hf_cache:/workspace/hf_cache \
            hpu-plugin-v1-test-env-pre-merge-${{ github.event.pull_request.head.sha }} \
            /bin/bash -c "
                pip install nixl==0.5.0 lm-eval[api] &&
                cd /workspace/vllm-gaudi/tests/unit_tests &&
                ./run_accuracy_test.sh
            "

          EXITCODE=$?
          echo "Test script exited with code: $EXITCODE"
  hpu_perf_tests:
    runs-on: ucb-vllm-cicd-g2
    # This is a final job that runs after the build and unit tests 
    # Unit tests are supposed to fail fast if anything goes wrong, removing the need for this job to run.
    needs: [pre_merge_hpu_test_build, hpu_unit_tests]
    steps:
      - name: Run test scripts
        run: |
          EXITCODE=1
          remove_docker_containers() { docker rm -f hpu-plugin-v1-test-perf-tests-${{ github.event.pull_request.head.sha }} || true; }
          trap 'remove_docker_containers; exit $EXITCODE;' EXIT
          remove_docker_containers

          echo "Running HPU plugin v1 perf tests"
          docker run --rm --runtime=habana --name=hpu-plugin-v1-test-perf-tests-${{ github.event.pull_request.head.sha }} --network=host \
            -e HABANA_VISIBLE_DEVICES=all \
            -e HF_TOKEN=${{ secrets.HF_TOKEN }} \
            -e HF_HOME=/workspace/hf_cache \
            -v /mnt/hf_cache:/workspace/hf_cache \
            hpu-plugin-v1-test-env-pre-merge-${{ github.event.pull_request.head.sha }} \
            /bin/bash "/workspace/vllm-gaudi/tests/full_tests/ci_perf_tests.sh"
          
          EXITCODE=$?
          echo "Test script exited with code: $EXITCODE"
  hpu_dp_tests:
    runs-on: ucb-vllm-cicd-g2
    # This is a final job that runs after the build and unit tests 
    # Unit tests are supposed to fail fast if anything goes wrong, removing the need for this job to run.
    needs: [pre_merge_hpu_test_build, hpu_unit_tests]
    steps:
      - name: Run test scripts
        run: |
          EXITCODE=1
          remove_docker_containers() { docker rm -f hpu-plugin-v1-test-dp-tests-${{ github.event.pull_request.head.sha }} || true; }
          trap 'remove_docker_containers; exit $EXITCODE;' EXIT
          remove_docker_containers

          echo "Running HPU plugin v1 dp tests"
          docker run --rm --runtime=habana --name=hpu-plugin-v1-test-dp-tests-${{ github.event.pull_request.head.sha }} --network=host \
            -e HABANA_VISIBLE_DEVICES=all \
            -e HF_HOME=/workspace/hf_cache \
            -e VLLM_SKIP_WARMUP=true \
            -e PT_HPU_LAZY_MODE=1 \
            -e VLLM_USE_V1=1 \
            -e HF_TOKEN=${{ secrets.HF_TOKEN }} \
            -v /mnt/hf_cache:/workspace/hf_cache \
            hpu-plugin-v1-test-env-pre-merge-${{ github.event.pull_request.head.sha }} \
            /bin/bash -c "python -u /workspace/vllm-gaudi/examples/data_parallel.py --dp-size 2 --tp-size 2"

          EXITCODE=$?
          echo "Test script exited with code: $EXITCODE"
  e2e:
    runs-on: ucb-vllm-cicd-g2
    needs: [pre_merge_hpu_test_build, hpu_unit_tests, discover_tests]
    strategy:
      fail-fast: false
      matrix:
        # The list of test functions is dynamically populated from the output of the 'discover_tests' job.
        test_function: ${{ fromJson(needs.discover_tests.outputs.matrix) }}

    steps:
      - name: Run test suite - ${{ matrix.test_function }}
        run: |
          EXITCODE=1
          CONTAINER_NAME="hpu-plugin-test-e2e-${{ github.event.pull_request.head.sha }}-${{ matrix.test_function }}"
          # Ensure the container is removed upon exit, regardless of success or failure.
          remove_docker_containers() { docker rm -f $CONTAINER_NAME || true; }
          trap 'remove_docker_containers; exit $EXITCODE;' EXIT
          remove_docker_containers

          echo "Running HPU plugin test: ${{ matrix.test_function }}"
          docker run --rm --runtime=habana --name=$CONTAINER_NAME --network=host \
            -e HABANA_VISIBLE_DEVICES=all \
            -e HF_HOME=/workspace/hf_cache \
            -e HF_TOKEN=${{ secrets.HF_TOKEN }} \
            -v /mnt/hf_cache:/workspace/hf_cache \
            hpu-plugin-v1-test-env-pre-merge-${{ github.event.pull_request.head.sha }} \
            /bin/bash "/workspace/vllm-gaudi/tests/full_tests/ci_gsm8k_tests.sh" "${{ matrix.test_function }}"

          EXITCODE=$?
          echo "Test script exited with code: $EXITCODE"
  pre_merge_hpu_test:
    runs-on: ucb-vllm-cicd-g2
    needs: [hpu_unit_tests, e2e, hpu_perf_tests]
    # This job is required to pass for pre-merge CI. By itself it does nothing, and will only pass if all jobs specified in "needs" list pass.
    steps:
      - name: Succeeded if all previous jobs passed
        run: echo "All previous jobs passed." 
